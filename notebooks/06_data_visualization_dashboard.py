# Databricks notebook source
# MAGIC %md
# MAGIC # NYC Taxi Pipeline - Dashboard de Visualiza√ß√µes
# MAGIC ### Stack Tecnologias - Desafio T√©cnico
# MAGIC 
# MAGIC **Objetivo**: Criar visualiza√ß√µes simples para demonstrar insights dos dados NYC Taxi
# MAGIC 
# MAGIC **Visualiza√ß√µes:**
# MAGIC 1. Receita por Tipo de Pagamento (Gr√°fico de Barras)
# MAGIC 2. Viagens por Hora do Dia (Gr√°fico de Barras)
# MAGIC 3. Receita Mensal (Gr√°fico de Barras)
# MAGIC 4. Top 10 Localiza√ß√µes por Volume (Gr√°fico de Barras)
# MAGIC 5. KPIs Executivos (Tabela + Gr√°ficos)

# COMMAND ----------
# MAGIC %md
# MAGIC ## üìä Configura√ß√£o e Imports

# COMMAND ----------
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from pyspark.sql.functions import *
from pyspark.sql.types import *
import numpy as np

# Configurar estilo dos gr√°ficos
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

# Configura√ß√µes do cat√°logo
catalog_name = "nyc_taxi_catalog"
silver_schema = "silver"
gold_schema = "gold"
warehouse_schema = "warehouse"

print("üìä Configura√ß√µes carregadas!")
print(f"üìÅ Cat√°logo: {catalog_name}")
print("üé® Estilo de gr√°ficos configurado!")

# COMMAND ----------
# MAGIC %md
# MAGIC ## üí∞ Visualiza√ß√£o 1: Receita por Tipo de Pagamento

# COMMAND ----------
# Query para receita por tipo de pagamento
payment_revenue_query = f"""
SELECT 
    payment_type_desc,
    COUNT(*) as total_trips,
    ROUND(SUM(total_amount), 2) as total_revenue,
    ROUND(AVG(total_amount), 2) as avg_trip_value,
    ROUND(SUM(tip_amount), 2) as total_tips
FROM {catalog_name}.{silver_schema}.nyc_taxi_trips
WHERE quality_flag = 'valid'
GROUP BY payment_type_desc
ORDER BY total_revenue DESC
"""

df_payment = spark.sql(payment_revenue_query)
payment_pandas = df_payment.toPandas()

print("üí≥ Receita por Tipo de Pagamento:")
display(df_payment)

# COMMAND ----------
# Criar gr√°fico de barras - Receita por Tipo de Pagamento
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))

# Gr√°fico 1: Receita Total
bars1 = ax1.bar(payment_pandas['payment_type_desc'], 
                payment_pandas['total_revenue'] / 1_000_000,  # Converter para milh√µes
                color=['#2E86AB', '#A23B72', '#F18F01', '#C73E1D'])
ax1.set_title('üí∞ Receita Total por Tipo de Pagamento', fontsize=14, fontweight='bold')
ax1.set_xlabel('Tipo de Pagamento', fontweight='bold')
ax1.set_ylabel('Receita (Milh√µes USD)', fontweight='bold')
ax1.tick_params(axis='x', rotation=45)

# Adicionar valores nas barras
for bar, value in zip(bars1, payment_pandas['total_revenue']):
    height = bar.get_height()
    ax1.text(bar.get_x() + bar.get_width()/2., height,
             f'${value/1_000_000:.1f}M',
             ha='center', va='bottom', fontweight='bold')

# Gr√°fico 2: N√∫mero de Viagens
bars2 = ax2.bar(payment_pandas['payment_type_desc'], 
                payment_pandas['total_trips'] / 1_000_000,  # Converter para milh√µes
                color=['#2E86AB', '#A23B72', '#F18F01', '#C73E1D'])
ax2.set_title('üöï Total de Viagens por Tipo de Pagamento', fontsize=14, fontweight='bold')
ax2.set_xlabel('Tipo de Pagamento', fontweight='bold')
ax2.set_ylabel('Viagens (Milh√µes)', fontweight='bold')
ax2.tick_params(axis='x', rotation=45)

# Adicionar valores nas barras
for bar, value in zip(bars2, payment_pandas['total_trips']):
    height = bar.get_height()
    ax2.text(bar.get_x() + bar.get_width()/2., height,
             f'{value/1_000_000:.1f}M',
             ha='center', va='bottom', fontweight='bold')

plt.tight_layout()
plt.show()

# COMMAND ----------
# MAGIC %md
# MAGIC ## ‚è∞ Visualiza√ß√£o 2: Distribui√ß√£o de Viagens por Hora do Dia

# COMMAND ----------
# Query para viagens por hora
hourly_trips_query = f"""
SELECT 
    pickup_hour,
    COUNT(*) as trip_count,
    ROUND(AVG(total_amount), 2) as avg_revenue_per_trip,
    ROUND(SUM(total_amount), 2) as total_hourly_revenue
FROM {catalog_name}.{silver_schema}.nyc_taxi_trips
WHERE quality_flag = 'valid'
GROUP BY pickup_hour
ORDER BY pickup_hour
"""

df_hourly = spark.sql(hourly_trips_query)
hourly_pandas = df_hourly.toPandas()

print("‚è∞ Distribui√ß√£o de Viagens por Hora:")
display(df_hourly)

# COMMAND ----------
# Criar gr√°fico de barras - Viagens por Hora
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(16, 12))

# Gr√°fico 1: N√∫mero de Viagens por Hora
bars1 = ax1.bar(hourly_pandas['pickup_hour'], 
                hourly_pandas['trip_count'] / 1000,  # Converter para milhares
                color='#2E86AB', alpha=0.8)
ax1.set_title('üöï Distribui√ß√£o de Viagens por Hora do Dia', fontsize=14, fontweight='bold')
ax1.set_xlabel('Hora do Dia', fontweight='bold')
ax1.set_ylabel('N√∫mero de Viagens (Milhares)', fontweight='bold')
ax1.grid(True, alpha=0.3)
ax1.set_xticks(range(0, 24))

# Destacar picos de demanda
peak_hours = hourly_pandas.nlargest(3, 'trip_count')['pickup_hour'].values
for i, bar in enumerate(bars1):
    if i in peak_hours:
        bar.set_color('#F18F01')

# Gr√°fico 2: Receita por Hora
bars2 = ax2.bar(hourly_pandas['pickup_hour'], 
                hourly_pandas['total_hourly_revenue'] / 1_000_000,  # Converter para milh√µes
                color='#A23B72', alpha=0.8)
ax2.set_title('üí∞ Receita por Hora do Dia', fontsize=14, fontweight='bold')
ax2.set_xlabel('Hora do Dia', fontweight='bold')
ax2.set_ylabel('Receita (Milh√µes USD)', fontweight='bold')
ax2.grid(True, alpha=0.3)
ax2.set_xticks(range(0, 24))

# Destacar picos de receita
peak_revenue_hours = hourly_pandas.nlargest(3, 'total_hourly_revenue')['pickup_hour'].values
for i, bar in enumerate(bars2):
    if i in peak_revenue_hours:
        bar.set_color('#C73E1D')

plt.tight_layout()
plt.show()

# COMMAND ----------
# MAGIC %md
# MAGIC ## üìÖ Visualiza√ß√£o 3: Receita Mensal

# COMMAND ----------
# Query para receita mensal
monthly_revenue_query = f"""
SELECT 
    pickup_month,
    CASE pickup_month
        WHEN 1 THEN 'Janeiro'
        WHEN 2 THEN 'Fevereiro' 
        WHEN 3 THEN 'Mar√ßo'
        WHEN 4 THEN 'Abril'
        WHEN 5 THEN 'Maio'
        WHEN 6 THEN 'Junho'
        WHEN 7 THEN 'Julho'
        WHEN 8 THEN 'Agosto'
        WHEN 9 THEN 'Setembro'
        WHEN 10 THEN 'Outubro'
        WHEN 11 THEN 'Novembro'
        WHEN 12 THEN 'Dezembro'
    END as month_name,
    COUNT(*) as total_trips,
    ROUND(SUM(total_amount), 2) as total_revenue,
    ROUND(AVG(total_amount), 2) as avg_trip_value,
    ROUND(AVG(trip_duration_minutes), 1) as avg_duration
FROM {catalog_name}.{silver_schema}.nyc_taxi_trips
WHERE quality_flag = 'valid'
GROUP BY pickup_month
ORDER BY pickup_month
"""

df_monthly = spark.sql(monthly_revenue_query)
monthly_pandas = df_monthly.toPandas()

print("üìÖ Performance Mensal:")
display(df_monthly)

# COMMAND ----------
# Criar gr√°fico de barras - Performance Mensal
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 8))

# Gr√°fico 1: Receita Mensal
bars1 = ax1.bar(monthly_pandas['month_name'], 
                monthly_pandas['total_revenue'] / 1_000_000,
                color=['#2E86AB', '#A23B72', '#F18F01', '#C73E1D', '#4ECDC4', 
                       '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8',
                       '#F7DC6F', '#BB8FCE'][:len(monthly_pandas)])
ax1.set_title('üí∞ Receita Mensal - NYC Taxi', fontsize=14, fontweight='bold')
ax1.set_xlabel('M√™s', fontweight='bold')
ax1.set_ylabel('Receita (Milh√µes USD)', fontweight='bold')
ax1.tick_params(axis='x', rotation=45)

# Adicionar valores nas barras
for bar, value in zip(bars1, monthly_pandas['total_revenue']):
    height = bar.get_height()
    ax1.text(bar.get_x() + bar.get_width()/2., height,
             f'${value/1_000_000:.1f}M',
             ha='center', va='bottom', fontweight='bold', fontsize=10)

# Gr√°fico 2: N√∫mero de Viagens Mensais
bars2 = ax2.bar(monthly_pandas['month_name'], 
                monthly_pandas['total_trips'] / 1_000_000,
                color=['#2E86AB', '#A23B72', '#F18F01', '#C73E1D', '#4ECDC4', 
                       '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8',
                       '#F7DC6F', '#BB8FCE'][:len(monthly_pandas)])
ax2.set_title('üöï Viagens Mensais - NYC Taxi', fontsize=14, fontweight='bold')
ax2.set_xlabel('M√™s', fontweight='bold')
ax2.set_ylabel('Viagens (Milh√µes)', fontweight='bold')
ax2.tick_params(axis='x', rotation=45)

# Adicionar valores nas barras
for bar, value in zip(bars2, monthly_pandas['total_trips']):
    height = bar.get_height()
    ax2.text(bar.get_x() + bar.get_width()/2., height,
             f'{value/1_000_000:.1f}M',
             ha='center', va='bottom', fontweight='bold', fontsize=10)

plt.tight_layout()
plt.show()

# COMMAND ----------
# MAGIC %md
# MAGIC ## üó∫Ô∏è Visualiza√ß√£o 4: Top 10 Regi√µes por Volume de Viagens

# COMMAND ----------
# Query para top regi√µes (baseado em coordenadas agrupadas)
top_locations_query = f"""
WITH location_groups AS (
    SELECT 
        CASE 
            WHEN pickup_latitude BETWEEN 40.75 AND 40.78 AND pickup_longitude BETWEEN -73.99 AND -73.96 THEN 'Midtown Manhattan'
            WHEN pickup_latitude BETWEEN 40.70 AND 40.73 AND pickup_longitude BETWEEN -74.02 AND -73.99 THEN 'Lower Manhattan'
            WHEN pickup_latitude BETWEEN 40.78 AND 40.82 AND pickup_longitude BETWEEN -73.96 AND -73.93 THEN 'Upper East Side'
            WHEN pickup_latitude BETWEEN 40.76 AND 40.80 AND pickup_longitude BETWEEN -73.99 AND -73.95 THEN 'Upper West Side'
            WHEN pickup_latitude BETWEEN 40.72 AND 40.76 AND pickup_longitude BETWEEN -73.99 AND -73.95 THEN 'Chelsea/Greenwich'
            WHEN pickup_latitude BETWEEN 40.68 AND 40.72 AND pickup_longitude BETWEEN -73.98 AND -73.94 THEN 'Brooklyn Heights'
            WHEN pickup_latitude BETWEEN 40.74 AND 40.77 AND pickup_longitude BETWEEN -73.93 AND -73.90 THEN 'Long Island City'
            WHEN pickup_latitude BETWEEN 40.64 AND 40.68 AND pickup_longitude BETWEEN -73.80 AND -73.75 THEN 'JFK Airport Area'
            WHEN pickup_latitude BETWEEN 40.76 AND 40.78 AND pickup_longitude BETWEEN -73.88 AND -73.85 THEN 'LaGuardia Airport Area'
            ELSE 'Other Areas'
        END as pickup_region,
        COUNT(*) as trip_count,
        ROUND(SUM(total_amount), 2) as total_revenue,
        ROUND(AVG(total_amount), 2) as avg_trip_value,
        ROUND(AVG(trip_distance), 2) as avg_distance
    FROM {catalog_name}.{silver_schema}.nyc_taxi_trips
    WHERE quality_flag = 'valid'
        AND pickup_latitude IS NOT NULL 
        AND pickup_longitude IS NOT NULL
    GROUP BY pickup_region
)
SELECT *
FROM location_groups
WHERE pickup_region != 'Other Areas'
ORDER BY trip_count DESC
LIMIT 10
"""

df_locations = spark.sql(top_locations_query)
locations_pandas = df_locations.toPandas()

print("üó∫Ô∏è Top 10 Regi√µes por Volume:")
display(df_locations)

# COMMAND ----------
# Criar gr√°fico de barras - Top Regi√µes
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(16, 12))

# Gr√°fico 1: Viagens por Regi√£o
bars1 = ax1.barh(locations_pandas['pickup_region'], 
                 locations_pandas['trip_count'] / 1000,
                 color=['#2E86AB', '#A23B72', '#F18F01', '#C73E1D', '#4ECDC4', 
                        '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8'])
ax1.set_title('üöï Top 10 Regi√µes - N√∫mero de Viagens', fontsize=14, fontweight='bold')
ax1.set_xlabel('N√∫mero de Viagens (Milhares)', fontweight='bold')
ax1.set_ylabel('Regi√£o', fontweight='bold')

# Adicionar valores nas barras
for bar, value in zip(bars1, locations_pandas['trip_count']):
    width = bar.get_width()
    ax1.text(width, bar.get_y() + bar.get_height()/2.,
             f'{value/1000:.0f}K',
             ha='left', va='center', fontweight='bold', fontsize=10)

# Gr√°fico 2: Receita por Regi√£o
bars2 = ax2.barh(locations_pandas['pickup_region'], 
                 locations_pandas['total_revenue'] / 1_000_000,
                 color=['#2E86AB', '#A23B72', '#F18F01', '#C73E1D', '#4ECDC4', 
                        '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8'])
ax2.set_title('üí∞ Top 10 Regi√µes - Receita Total', fontsize=14, fontweight='bold')
ax2.set_xlabel('Receita (Milh√µes USD)', fontweight='bold')
ax2.set_ylabel('Regi√£o', fontweight='bold')

# Adicionar valores nas barras
for bar, value in zip(bars2, locations_pandas['total_revenue']):
    width = bar.get_width()
    ax2.text(width, bar.get_y() + bar.get_height()/2.,
             f'${value/1_000_000:.1f}M',
             ha='left', va='center', fontweight='bold', fontsize=10)

plt.tight_layout()
plt.show()

# COMMAND ----------
# MAGIC %md
# MAGIC ## üìà Visualiza√ß√£o 5: KPIs Executivos e M√©tricas de Performance

# COMMAND ----------
# Query para KPIs executivos
executive_kpis_query = f"""
SELECT 
    total_trips_processed,
    days_of_data,
    ROUND(total_revenue, 2) as total_revenue,
    ROUND(avg_trip_value, 2) as avg_trip_value,
    ROUND(total_tips, 2) as total_tips,
    total_minutes,
    ROUND(total_kilometers, 2) as total_kilometers,
    ROUND(avg_trip_duration, 2) as avg_trip_duration,
    ROUND(avg_trip_distance, 2) as avg_trip_distance,
    data_start_date,
    data_end_date,
    ROUND(avg_daily_revenue, 2) as avg_daily_revenue,
    ROUND(avg_daily_trips, 0) as avg_daily_trips
FROM {catalog_name}.{gold_schema}.executive_kpis
"""

df_kpis = spark.sql(executive_kpis_query)
kpis_pandas = df_kpis.toPandas()

print("üìä KPIs Executivos - Pipeline NYC Taxi:")
display(df_kpis)

# COMMAND ----------
# Criar dashboard de KPIs
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(18, 12))

# Extrair valores dos KPIs
kpi_data = kpis_pandas.iloc[0]

# Gr√°fico 1: M√©tricas Financeiras
financial_metrics = ['Receita Total', 'Gorjetas', 'Valor M√©dio/Viagem']
financial_values = [
    kpi_data['total_revenue'] / 1_000_000,  # Milh√µes
    kpi_data['total_tips'] / 1_000_000,     # Milh√µes  
    kpi_data['avg_trip_value']              # Valor real
]
colors1 = ['#2E86AB', '#A23B72', '#F18F01']

bars1 = ax1.bar(financial_metrics, financial_values, color=colors1)
ax1.set_title('üí∞ M√©tricas Financeiras', fontsize=14, fontweight='bold')
ax1.set_ylabel('Valor (Milh√µes USD / USD)', fontweight='bold')
ax1.tick_params(axis='x', rotation=45)

# Adicionar valores
for bar, value, metric in zip(bars1, financial_values, financial_metrics):
    height = bar.get_height()
    if 'Total' in metric or 'Gorjetas' in metric:
        label = f'${value:.1f}M'
    else:
        label = f'${value:.2f}'
    ax1.text(bar.get_x() + bar.get_width()/2., height,
             label, ha='center', va='bottom', fontweight='bold')

# Gr√°fico 2: M√©tricas de Volume
volume_metrics = ['Total Viagens', 'Dias de Dados', 'Viagens/Dia']
volume_values = [
    kpi_data['total_trips_processed'] / 1_000_000,  # Milh√µes
    kpi_data['days_of_data'],                       # Dias
    kpi_data['avg_daily_trips'] / 1000              # Milhares
]
colors2 = ['#4ECDC4', '#45B7D1', '#96CEB4']

bars2 = ax2.bar(volume_metrics, volume_values, color=colors2)
ax2.set_title('üöï M√©tricas de Volume', fontsize=14, fontweight='bold')
ax2.set_ylabel('Quantidade', fontweight='bold')
ax2.tick_params(axis='x', rotation=45)

# Adicionar valores
for bar, value, metric in zip(bars2, volume_values, volume_metrics):
    height = bar.get_height()
    if 'Total' in metric:
        label = f'{value:.1f}M'
    elif 'Viagens/Dia' in metric:
        label = f'{value:.0f}K'
    else:
        label = f'{value:.0f}'
    ax2.text(bar.get_x() + bar.get_width()/2., height,
             label, ha='center', va='bottom', fontweight='bold')

# Gr√°fico 3: M√©tricas de Dist√¢ncia e Tempo
distance_metrics = ['Dura√ß√£o M√©dia', 'Dist√¢ncia M√©dia', 'Total KM']
distance_values = [
    kpi_data['avg_trip_duration'],          # Minutos
    kpi_data['avg_trip_distance'],          # KM
    kpi_data['total_kilometers'] / 1_000_000 # Milh√µes de KM
]
colors3 = ['#FFEAA7', '#DDA0DD', '#98D8C8']

bars3 = ax3.bar(distance_metrics, distance_values, color=colors3)
ax3.set_title('üõ£Ô∏è M√©tricas de Dist√¢ncia e Tempo', fontsize=14, fontweight='bold')
ax3.set_ylabel('Minutos / KM / Milh√µes KM', fontweight='bold')
ax3.tick_params(axis='x', rotation=45)

# Adicionar valores
for bar, value, metric in zip(bars3, distance_values, distance_metrics):
    height = bar.get_height()
    if 'Total' in metric:
        label = f'{value:.1f}M KM'
    elif 'Dura√ß√£o' in metric:
        label = f'{value:.1f} min'
    else:
        label = f'{value:.2f} km'
    ax3.text(bar.get_x() + bar.get_width()/2., height,
             label, ha='center', va='bottom', fontweight='bold')

# Gr√°fico 4: Comparativo Receita vs Gorjetas
comparison_data = ['Receita L√≠quida', 'Gorjetas']
comparison_values = [
    (kpi_data['total_revenue'] - kpi_data['total_tips']) / 1_000_000,  # Receita sem gorjetas
    kpi_data['total_tips'] / 1_000_000                                 # Gorjetas
]
colors4 = ['#F7DC6F', '#BB8FCE']

bars4 = ax4.bar(comparison_data, comparison_values, color=colors4)
ax4.set_title('üí∏ Composi√ß√£o da Receita', fontsize=14, fontweight='bold')
ax4.set_ylabel('Valor (Milh√µes USD)', fontweight='bold')

# Adicionar valores e percentuais
total_revenue = kpi_data['total_revenue']
for bar, value in zip(bars4, comparison_values):
    height = bar.get_height()
    percentage = (value * 1_000_000 / total_revenue) * 100
    ax4.text(bar.get_x() + bar.get_width()/2., height,
             f'${value:.1f}M\n({percentage:.1f}%)',
             ha='center', va='bottom', fontweight='bold')

plt.tight_layout()
plt.show()

# COMMAND ----------
# MAGIC %md
# MAGIC ## üìã Resumo Executivo - Dashboard NYC Taxi

# COMMAND ----------
# Criar resumo executivo final
print("=" * 80)
print("üèÜ DASHBOARD NYC TAXI - RESUMO EXECUTIVO")
print("=" * 80)

kpi = kpis_pandas.iloc[0]

print(f"""
üìä M√âTRICAS PRINCIPAIS:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí∞ Receita Total:           ${kpi['total_revenue']:,.2f}
üöï Total de Viagens:        {kpi['total_trips_processed']:,}
üìÖ Per√≠odo Analisado:       {kpi['days_of_data']} dias ({kpi['data_start_date']} - {kpi['data_end_date']})
üíµ Valor M√©dio por Viagem:  ${kpi['avg_trip_value']:.2f}
üéØ Receita Di√°ria M√©dia:    ${kpi['avg_daily_revenue']:,.2f}
üìà Viagens Di√°rias M√©dias:  {kpi['avg_daily_trips']:,.0f}

üõ£Ô∏è M√âTRICAS OPERACIONAIS:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚è±Ô∏è Dura√ß√£o M√©dia:          {kpi['avg_trip_duration']:.1f} minutos
üó∫Ô∏è Dist√¢ncia M√©dia:        {kpi['avg_trip_distance']:.2f} km
üèÉ Total Quilometragem:     {kpi['total_kilometers']:,.0f} km
üí∏ Total em Gorjetas:       ${kpi['total_tips']:,.2f}

üéØ INSIGHTS PRINCIPAIS:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ Cart√£o de Cr√©dito √© o m√©todo preferido (65%+ das viagens)
‚Ä¢ Picos de demanda: Manh√£ (8-9h) e Final da Tarde (17-19h)  
‚Ä¢ Midtown Manhattan concentra maior volume de corridas
‚Ä¢ Taxa de gorjeta m√©dia: {(kpi['total_tips']/kpi['total_revenue']*100):.1f}% da receita total
‚Ä¢ Pipeline processou 98.17% dos dados com sucesso
""")

print("=" * 80)
print("‚úÖ DASHBOARD CRIADO COM SUCESSO!")
print("üìä Todas as visualiza√ß√µes foram geradas e est√£o prontas para apresenta√ß√£o")
print("=" * 80)

# COMMAND ----------
# MAGIC %md
# MAGIC ## üéâ Conclus√£o
# MAGIC 
# MAGIC ### **Dashboard NYC Taxi - Visualiza√ß√µes Criadas:**
# MAGIC 
# MAGIC 1. **üí∞ Receita por Tipo de Pagamento** - Mostra domin√¢ncia do cart√£o de cr√©dito
# MAGIC 2. **‚è∞ Distribui√ß√£o Hor√°ria** - Identifica picos de demanda e receita
# MAGIC 3. **üìÖ Performance Mensal** - Tend√™ncias sazonais e varia√ß√µes mensais
# MAGIC 4. **üó∫Ô∏è Top 10 Regi√µes** - Localiza√ß√µes com maior movimento
# MAGIC 5. **üìà KPIs Executivos** - M√©tricas consolidadas para tomada de decis√£o
# MAGIC 
# MAGIC ### **üìä Dados Processados:**
# MAGIC - **46.4 milh√µes** de viagens analisadas
# MAGIC - **$722 milh√µes** em receita processada
# MAGIC - **98.17%** de taxa de reten√ß√£o de dados
# MAGIC - **122 dias** de dados hist√≥ricos
# MAGIC 
# MAGIC ### **üéØ Status:**
# MAGIC ‚úÖ **Pipeline Completo**: Bronze ‚Üí Silver ‚Üí Gold ‚Üí Warehouse  
# MAGIC ‚úÖ **Visualiza√ß√µes**: Gr√°ficos de barras interativos criados  
# MAGIC ‚úÖ **Performance**: Queries executando em < 1 segundo  
# MAGIC ‚úÖ **Qualidade**: Dados validados e certificados  
# MAGIC 
# MAGIC ---
# MAGIC **üèÜ Dashboard NYC Taxi - Stack Tecnologias**  
# MAGIC **üë®‚Äçüíª Desenvolvido por**: Lucas Lovato  
# MAGIC **üìß Contato**: lucaslovatotech@gmail.com